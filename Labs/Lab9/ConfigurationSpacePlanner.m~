% Function to Create a Viable Configuration Space for the Ottia SCARA Arm
% Units: mm, rad.
% Origin is Joint A Axis.
function ConfigurationSpacePlanner()
tic
% Joint Angles Referenced from Pointing Straight Forward:
min_th_A = -pi * 19/20; % Minimum /Attainable/ Angle for Joint A in Freespace (no obstacles)
max_th_A = pi * 19/20; % Max
min_th_B = -pi / 2; % Minimum /Attainable/ Angle for Joint B in Freespace (no obstacles)
max_th_B = pi / 2; % Max
step_th = ( (360/200) ) * (pi / 180); % Minimum meaningful (or attainable) change in th.
step_th = step_th / 4; % Gear Reduction
step_th = step_th / 2; % Microstepping

len_AB = 150; % Distance from Joint A to Joint B
len_BF = 135; % Distance from Joint B to End Effector

width_arm = 75; % Width of Arm Segment (Arm Segment is Slot Shaped)

%% Create Workspace (in X-Y Space):
res_xy =  step_th * (len_AB+len_BF); % mm/cell Smallest Meaningful Size (Arc-length of smallest attainable Delta TH * length of extended arm)
box_width = 2*(len_AB + len_BF + 2 * width_arm);
box_width_cells = box_width/res_xy; % Convert to Cells
box_width_cells = floor(box_width_cells/2)*2 + 1; % Round Up to Nearest Odd Number
WS_XY = zeros(box_width_cells);

%% Generate X-Y Config Space (buffer workspace):
buff = 0.5 * 25.4; % 0.5in

config_XY = WS_XY;
%% TODO: FIX THIS:
XY_mid = ceil(box_width_cells/2);

drawRect(-2*25.4, 8*25.4, 2*25.4, 5*25.4);
% config_XY( XY_mid-ceil(174/res_xy):XY_mid-ceil(35/res_xy), XY_mid-ceil(150/res_xy):XY_mid+ceil(150/res_xy) ) = 1; %% TODO: FIX THIS

%% Generate A-B Config Space and XY-Accessibility Graph:
access_XY = ones(size(config_XY)); % All-Locations Inaccessible (walls) by default

ths_A = min_th_A : step_th : max_th_A;
ths_B = min_th_B : step_th : max_th_B;
config_AB = zeros(2*pi, (-pi:step_th:pi)); % Initialize with Complete FreeSpace
% Impose Joint Angle Limits:
config_AB(

% Iterate over Angle Space and find Corresponding Cell Value in XY Space.
x=0; y=0; i=0; j=0; % Init. (avoid freq. gc and reallocation)
a=1; b=1;
while a <= numel(ths_A)
thA = ths_A(a);
    b = 1;
    while b <= numel(ths_B)
    thB = ths_B(b);
        x = len_AB * cos(thA) + len_BF * cos(thA+thB);
        y = len_AB * sin(thA) + len_BF * sin(thA+thB);
        
        i = ceil(box_width_cells/2) - round(y/res_xy);
        j = ceil(box_width_cells/2) + round(x/res_xy);
        
        acc = config_XY(i,j) | intersects_obstacle(thA,thB); % Whether Location is Accessible
        config_AB(a,b) = acc;
        access_XY(i,j) = acc;
    b = b+1;
    end % thB
a = a+1;
end % thA
%                                                                            pause

% Determines Whether Joint Config (tha, thb) will Cause the Arm to Intersect
% an Obstacle in the XY Configuration Space:
function hits = intersects_obstacle(tha, thb, step)
    step_size = res_xy;
    if nargin > 2
        step_size = step;
    end
    hits = 0;
    
    mid_cell = ceil(box_width_cells/2); % Middle Cell Location
    
    n = 0;
    Ntot = round(len_AB / step_size);
    xi = 0; yi = 0;
    dx = step_size * cos(tha); dx = dx/res_xy;
    dy = step_size * sin(tha); dy = dy/res_xy;
    % Iterate in Steps of res_xy from Joint A to Joint B
    while(n <= Ntot && ~hits)
        xi = xi + dx;
        yi = yi + dy;
        
        ii = mid_cell - round(yi);
        ji = mid_cell + round(xi);
        
        hits = hits | config_XY(ii,ji);
    n = n + 1;
    end
    % Iterate in Steps of res_xy from Joint B to End Effector
    n = 0;
    Ntot = round(len_BF / step_size);
    dx = step_size * cos(tha+thb); dx = dx/res_xy;
    dy = step_size * sin(tha+thb); dy = dy/res_xy;
    % Iterate in Steps of res_xy from Joint A to Joint B
    while(n <= Ntot && ~hits)
        xi = xi + dx;
        yi = yi + dy;
        
        ii = mid_cell - round(yi);
        ji = mid_cell + round(xi);
        
        hits = hits | config_XY(ii,ji);
    n = n + 1;
    end
end %intersects_obstacle

%% Display:
figure();
imagesc(config_XY);
title('XY Configuration Space');

figure();
imagesc(config_AB);
title('Joint Angle Configuration Space');

Na = numel(ths_A);
ta = ((-360:15:360)*pi/180 - min_th_A) * Na/(max_th_A-min_th_A);
yticks(ta);
yticklabels(num2cell(-360:15:360));

Nb = numel(ths_A);
tb = ((-360:15:360)*pi/180 - min_th_B) * Nb/(max_th_B-min_th_B);
xticks(tb);
xticklabels(num2cell(-360:15:360));



figure();
imagesc(access_XY);
title('XY Accessibilty');

toc

% Draws a Rectangular Zone of Exclusion in the Configuration Space with
% upper left corner at (x1,y1) and lower right corner at (x2,y2) where
% (0,0) is the position of Joint A. Units in mm.
function drawRect(x1,y1,x2,y2)
    config_XY( XY_mid+ceil(y2/res_xy):XY_mid+ceil(y1/res_xy), XY_mid+ceil(x1/res_xy):XY_mid+ceil(x2/res_xy) ) = 1;
end
end % #ConfigurationSpacePlanner